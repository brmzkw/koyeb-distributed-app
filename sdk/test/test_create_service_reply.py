# coding: utf-8

"""
    Koyeb Rest API

    The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.create_service_reply import CreateServiceReply

class TestCreateServiceReply(unittest.TestCase):
    """CreateServiceReply unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateServiceReply:
        """Test CreateServiceReply
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateServiceReply`
        """
        model = CreateServiceReply()
        if include_optional:
            return CreateServiceReply(
                service = openapi_client.models.service.Service(
                    id = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    succeeded_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    paused_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    resumed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    terminated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    name = '', 
                    type = 'INVALID_TYPE', 
                    organization_id = '', 
                    app_id = '', 
                    status = 'STARTING', 
                    messages = [
                        ''
                        ], 
                    version = '', 
                    active_deployment_id = '', 
                    latest_deployment_id = '', 
                    last_provisioned_deployment_id = '', 
                    state = openapi_client.models.service_state.ServiceState(
                        desired_deployment = openapi_client.models.desired_deployment.DesiredDeployment(
                            groups = [
                                openapi_client.models.desired_deployment/group.DesiredDeployment.Group(
                                    name = '', 
                                    deployment_ids = [
                                        ''
                                        ], )
                                ], ), 
                        auto_release = openapi_client.models.auto_release.AutoRelease(), ), )
            )
        else:
            return CreateServiceReply(
        )
        """

    def testCreateServiceReply(self):
        """Test CreateServiceReply"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
