# coding: utf-8

"""
    Koyeb Rest API

    The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.regional_deployment_definition import RegionalDeploymentDefinition

class TestRegionalDeploymentDefinition(unittest.TestCase):
    """RegionalDeploymentDefinition unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RegionalDeploymentDefinition:
        """Test RegionalDeploymentDefinition
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RegionalDeploymentDefinition`
        """
        model = RegionalDeploymentDefinition()
        if include_optional:
            return RegionalDeploymentDefinition(
                name = '',
                type = 'INVALID',
                routes = [
                    openapi_client.models.route.Route(
                        port = 56, 
                        path = '', )
                    ],
                ports = [
                    openapi_client.models.port.Port(
                        port = 56, 
                        protocol = '', )
                    ],
                env = [
                    openapi_client.models.env.Env(
                        key = '', 
                        value = '', 
                        secret = '', )
                    ],
                region = '',
                scaling = openapi_client.models.scaling.Scaling(
                    min = 56, 
                    max = 56, 
                    targets = [
                        openapi_client.models.deployment_scaling_target.DeploymentScalingTarget(
                            average_cpu = openapi_client.models.deployment_scaling_target_average_cpu.DeploymentScalingTargetAverageCPU(
                                value = 56, ), 
                            average_mem = openapi_client.models.deployment_scaling_target_average_mem.DeploymentScalingTargetAverageMem(
                                value = 56, ), 
                            requests_per_second = openapi_client.models.deployment_scaling_target_requests_per_second.DeploymentScalingTargetRequestsPerSecond(
                                value = 56, ), 
                            concurrent_requests = openapi_client.models.deployment_scaling_target_concurrent_requests.DeploymentScalingTargetConcurrentRequests(
                                value = 56, ), 
                            requests_response_time = openapi_client.models.deployment_scaling_target_requests_response_time.DeploymentScalingTargetRequestsResponseTime(
                                value = 56, 
                                quantile = 56, ), )
                        ], ),
                instance_type = '',
                deployment_group = '',
                health_checks = [
                    openapi_client.models.deployment_health_check.DeploymentHealthCheck(
                        grace_period = 56, 
                        interval = 56, 
                        restart_limit = 56, 
                        timeout = 56, 
                        tcp = openapi_client.models.tcp_health_check.TCPHealthCheck(
                            port = 56, ), 
                        http = openapi_client.models.http_health_check.HTTPHealthCheck(
                            port = 56, 
                            path = '', 
                            method = '', 
                            headers = [
                                openapi_client.models.http_header.HTTPHeader(
                                    key = '', 
                                    value = '', )
                                ], ), )
                    ],
                volumes = [
                    openapi_client.models.regional_deployment_volume.RegionalDeploymentVolume(
                        id = '', 
                        path = '', 
                        replica_index = 56, )
                    ],
                skip_cache = True,
                use_kuma_v2 = True,
                docker = openapi_client.models.docker_source.DockerSource(
                    image = '', 
                    command = '', 
                    args = [
                        ''
                        ], 
                    image_registry_secret = '', 
                    entrypoint = [
                        ''
                        ], 
                    privileged = True, ),
                git = openapi_client.models.git_source.GitSource(
                    repository = '', 
                    branch = '', 
                    tag = '', 
                    sha = '', 
                    build_command = '', 
                    run_command = '', 
                    no_deploy_on_push = True, 
                    workdir = '', 
                    buildpack = openapi_client.models.buildpack_builder.BuildpackBuilder(
                        build_command = '', 
                        run_command = '', 
                        privileged = True, ), 
                    docker = openapi_client.models.docker_builder.DockerBuilder(
                        dockerfile = '', 
                        entrypoint = [
                            ''
                            ], 
                        command = '', 
                        args = [
                            ''
                            ], 
                        target = '', 
                        privileged = True, ), ),
                archive = openapi_client.models.archive_source.ArchiveSource(
                    id = '', 
                    buildpack = openapi_client.models.buildpack_builder.BuildpackBuilder(
                        build_command = '', 
                        run_command = '', 
                        privileged = True, ), 
                    docker = openapi_client.models.docker_builder.DockerBuilder(
                        dockerfile = '', 
                        entrypoint = [
                            ''
                            ], 
                        command = '', 
                        args = [
                            ''
                            ], 
                        target = '', 
                        privileged = True, ), )
            )
        else:
            return RegionalDeploymentDefinition(
        )
        """

    def testRegionalDeploymentDefinition(self):
        """Test RegionalDeploymentDefinition"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
