# coding: utf-8

"""
    Koyeb Rest API

    The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictStr
from typing import Optional
from openapi_client.models.stream_result_of_log_entry import StreamResultOfLogEntry

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class LogsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def tail_logs(
        self,
        type: Optional[StrictStr] = None,
        app_id: Optional[StrictStr] = None,
        service_id: Optional[StrictStr] = None,
        deployment_id: Optional[StrictStr] = None,
        regional_deployment_id: Optional[StrictStr] = None,
        instance_id: Optional[StrictStr] = None,
        stream: Optional[StrictStr] = None,
        start: Optional[StrictStr] = None,
        limit: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> StreamResultOfLogEntry:
        """Tails logs


        :param type:
        :type type: str
        :param app_id:
        :type app_id: str
        :param service_id:
        :type service_id: str
        :param deployment_id:
        :type deployment_id: str
        :param regional_deployment_id:
        :type regional_deployment_id: str
        :param instance_id:
        :type instance_id: str
        :param stream:
        :type stream: str
        :param start:
        :type start: str
        :param limit:
        :type limit: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tail_logs_serialize(
            type=type,
            app_id=app_id,
            service_id=service_id,
            deployment_id=deployment_id,
            regional_deployment_id=regional_deployment_id,
            instance_id=instance_id,
            stream=stream,
            start=start,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StreamResultOfLogEntry",
            '400': "ErrorWithFields",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '500': "Error",
            '503': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tail_logs_with_http_info(
        self,
        type: Optional[StrictStr] = None,
        app_id: Optional[StrictStr] = None,
        service_id: Optional[StrictStr] = None,
        deployment_id: Optional[StrictStr] = None,
        regional_deployment_id: Optional[StrictStr] = None,
        instance_id: Optional[StrictStr] = None,
        stream: Optional[StrictStr] = None,
        start: Optional[StrictStr] = None,
        limit: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[StreamResultOfLogEntry]:
        """Tails logs


        :param type:
        :type type: str
        :param app_id:
        :type app_id: str
        :param service_id:
        :type service_id: str
        :param deployment_id:
        :type deployment_id: str
        :param regional_deployment_id:
        :type regional_deployment_id: str
        :param instance_id:
        :type instance_id: str
        :param stream:
        :type stream: str
        :param start:
        :type start: str
        :param limit:
        :type limit: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tail_logs_serialize(
            type=type,
            app_id=app_id,
            service_id=service_id,
            deployment_id=deployment_id,
            regional_deployment_id=regional_deployment_id,
            instance_id=instance_id,
            stream=stream,
            start=start,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StreamResultOfLogEntry",
            '400': "ErrorWithFields",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '500': "Error",
            '503': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tail_logs_without_preload_content(
        self,
        type: Optional[StrictStr] = None,
        app_id: Optional[StrictStr] = None,
        service_id: Optional[StrictStr] = None,
        deployment_id: Optional[StrictStr] = None,
        regional_deployment_id: Optional[StrictStr] = None,
        instance_id: Optional[StrictStr] = None,
        stream: Optional[StrictStr] = None,
        start: Optional[StrictStr] = None,
        limit: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Tails logs


        :param type:
        :type type: str
        :param app_id:
        :type app_id: str
        :param service_id:
        :type service_id: str
        :param deployment_id:
        :type deployment_id: str
        :param regional_deployment_id:
        :type regional_deployment_id: str
        :param instance_id:
        :type instance_id: str
        :param stream:
        :type stream: str
        :param start:
        :type start: str
        :param limit:
        :type limit: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tail_logs_serialize(
            type=type,
            app_id=app_id,
            service_id=service_id,
            deployment_id=deployment_id,
            regional_deployment_id=regional_deployment_id,
            instance_id=instance_id,
            stream=stream,
            start=start,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StreamResultOfLogEntry",
            '400': "ErrorWithFields",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '500': "Error",
            '503': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tail_logs_serialize(
        self,
        type,
        app_id,
        service_id,
        deployment_id,
        regional_deployment_id,
        instance_id,
        stream,
        start,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if type is not None:
            
            _query_params.append(('type', type))
            
        if app_id is not None:
            
            _query_params.append(('app_id', app_id))
            
        if service_id is not None:
            
            _query_params.append(('service_id', service_id))
            
        if deployment_id is not None:
            
            _query_params.append(('deployment_id', deployment_id))
            
        if regional_deployment_id is not None:
            
            _query_params.append(('regional_deployment_id', regional_deployment_id))
            
        if instance_id is not None:
            
            _query_params.append(('instance_id', instance_id))
            
        if stream is not None:
            
            _query_params.append(('stream', stream))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                '*/*'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/streams/logs/tail',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


